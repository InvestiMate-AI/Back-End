name: CI/CD with Git Actions & Docker Hub

# 워크플로우 트리거: 브랜치에 대한 push 및 pull request 이벤트 발생 시 실행
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 소스 코드를 체크아웃 (클론)합니다.
      - name: Checkout-source code
        uses: actions/checkout@v3

      # application.yml 파일 생성
      - name: Set application.yml
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          echo ${{ secrets.APPLICATION_YML }} | base64 --decode >> ./src/main/resources/application.yml

      # .env파일 생성 -> OPEN AI API키 보관용
      - name: Set .env file
        run: |
          echo ${{ secrets.OPENAI_API_KEY }} | base64 --decode > .env

      # Open JDk 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Gradle 실행권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # Spring Boot 애플리케이션을 Gradle로 빌드 (테스트는 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Docker Hub에 로그인합니다.
      - name: Login docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Spring Boot 애플리케이션의 Docker 이미지를 빌드하고 Docker Hub에 푸쉬합니다.
      - name: Build and push Spring Boot app Docker image
        run:
          docker build -t ${{ secrets.DOCKER_REPOSITORY }}:backend --platform linux/amd64 .

          docker push ${{ secrets.DOCKER_REPOSITORY }}:backend

      # nginx 도커 이미지 빌드 후 도커허브에 push하기
#      - name: Build and push Nginx Docker image
#        run: |
#          cd ./src/main/resources/nginx-config/
#          docker build -t ${{ secrets.DOCKER_REPOSITORY }}:nginx --platform linux/amd64 .
#          docker push ${{ secrets.DOCKER_REPOSITORY }}:nginx

      # Docker Compose 설정 파일을 EC2 인스턴스로 전송
#      - name: Send compose.yml
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.SSH_HOST }} # 퍼블릭 IPv4 DNS
#          username: ubuntu
#          key: ${{ secrets.SSH_KEY }} # cat {ec2_instance_name}.pem
#          port: ${{ secrets.SSH_PORT }} # 보안 그룹 인바운드 규칙의 SSH Port Number
#          source: "./compose.yml"
#          target: "/home/ubuntu/workspace/server/"

      # EC2 인스턴스에서 Docker 이미지를 pull하고 Docker Compose를 사용하여 애플리케이션을 배포
      - name: Deploy at EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }} # 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.SSH_KEY }} # cat {ec2_instance_name}.pem
          port: ${{ secrets.SSH_PORT }} # 보안 그룹 인바운드 규칙의 SSH Port Number
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}:backend
            cd /home/ubuntu/workspace/server/
            sudo docker-compose down
            sudo docker-compose up -d
            sudo docker exec backend-container /bin/bash -c "source /opt/venv/bin/activate && java -jar -Duser.timezone=Asia/Seoul /app.jar"
