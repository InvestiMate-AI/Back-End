name: CI/CD with Git Actions & Docker Hub

on:
  push:
    branches: [ "chatbot" ]
  pull_request:
    branches: [ "chatbot" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout-source code
        uses: actions/checkout@v3

      # application.yml 파일 생성
      - name: production application file setting
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          echo ${{ secrets.APPLICATION_YML }} | base64 --decode >> ./src/main/resources/application.yml

      # .env파일 생성
      - name: Create .env file
        run: |
          echo ${{ secrets.ENV_FILE }} | base64 --decode > .env

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Gradle 실행권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # Spring boot application 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Docker Image 빌드
      - name: Build docker image
        run: docker build -t juseungl/investi-mate --platform linux/amd64 .

      # docker hub 로그인
      - name: Login docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

        # docker hub 퍼블리시
      - name: Publish to docker hub
        run: docker push juseungl/investi-mate

        # WAS 인스턴스 접속 & 애플리케이션 실행
#      - name: Connect to WAS & Execute Application
#        uses: appleboy/ssh-action@v0.1.6
#        with:
#          host: ${{ secrets.WAS_HOST }}
#          username: ${{ secrets.WAS_USERNAME }}
#          key: ${{ secrets.SSH_KEY }}
#          port: ${{ secrets.WAS_SSH_PORT }}
#          script: |
#            docker stop $(docker ps -a -q)
#            docker rm $(docker ps -a -q)
#            docker pull juseungl/investi-mate
#            docker run -d -p 8080:8080 --name juseungl/investi-mate

#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Login to ECR
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Set timestamp
#        id: vars
#        run: echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
#
#      - name: Build & Push to ECR
#        run: |
#          docker build -t hwany-service .
#          IMAGE_TAG="${{ secrets.AWS_ACCOUNT_NUM }}.dkr.ecr.ap-northeast-2.amazonaws.com/yhp-capstone-repository:hwany-service-${TIMESTAMP}"
#          docker tag hwany-service $IMAGE_TAG
#          docker push $IMAGE_TAG
#        env:
#          TIMESTAMP: ${{ env.TIMESTAMP }}
